%% TotalResidentialWaste Class Definition
% The TotalResidentialWaste behavior calculates the total amount of
% residential waste generated by the city by specific waste stream. 
% The waste streams are as follows:
% - Paper
% - Glass
% - Ferrous Metal
% - Non-Ferrous Metal
% - Film Plastic
% - Rigid Plastic
% - Textiles
% - Organics
% - Other
% Attribute IDs 17 to 28 are used in this calculation
%
% 10-August, 2011
% Sydney Do, sydneydo@mit.edu
%%
classdef TotalResidentialWaste < Behavior
    properties
        paper;          % the total paper input to the waste management system
        glass;          % the total glass input to the waste management system
        fe_metal;       % the total ferrous metal input to the waste management system
        nonfe_metal;    % the total non-ferrous metal input to the waste management system
        filmplastic;    % the total film plastic input to the waste management system
        rigidplastic;   % the total rigid plastic input to the waste management system
        textiles;       % the total paper input to the waste management system
        organics;       % the total paper input to the waste management system
        other;          % the total paper input to the waste management system
    end
    methods
        %% TotalResidentialWaste Constructor
        % Instantiates a new TotalResidentialWaste object.
        % 
        % obj = TotalResidentialWaste()
        %   obj:            the new TotalResidentialWaste object
        %   paper:          % the total paper input to the waste management system
        %   glass:          % the total glass input to the waste management system
        %   fe_metal:       % the total ferrous metal input to the waste management system
        %   nonfe_metal:    % the total non-ferrous metal input to the waste management system
        %   filmplastic:    % the total film plastic input to the waste management system
        %   rigidplastic:   % the total rigid plastic input to the waste management system
        %   textiles:       % the total paper input to the waste management system
        %   organics:       % the total paper input to the waste management system
        %   other:          % the total paper input to the waste management system
        function obj = TotalResidentialWaste()
            obj = obj@Behavior('Total Residential Waste per Year', ...
                ['Calculates the total residential waste generated ' ...
                'in the city by waste stream.'], ...
                'tonnes','[0,inf)');
        end
    end
    methods(Access=protected)
        %% EvaluateImpl Function
        % Evaluates the behavior for a specified city. Note: the
        % superclass Evaluate function should be used for evaluation during
        % execution.
        %
        % val = obj.EvaluateImpl(city)
        %   val:    the evaluated value
        %   obj:    the TotalResidentialWaste object handle
        function val = EvaluateImpl(obj)
            
            % For each building system node, identify residential node and
            % calculate corresponding waste generated per node by stream.
            % Following this, sum all stream values
            
            city = CityNet.instance().city;
            
            % Search for building system identifier       
            for i = 1:length(city.systems)
                if strcmp(city.systems(i).name,'Building')==1
                    ind = i;
                    break
                end
            end      
            
            % Define Number of Residents per cell function
            numberpplcell = NumberResidentsCell;
            
            % Initialize waste values
            TotalWaste = 0;
            TotalPaper = 0;
            TotalGlass = 0;
            TotalFeMetal = 0;
            TotalNonFeMetal = 0;
            TotalFilmPlastic = 0;
            TotalRigidPlastic = 0;
            TotalTextiles = 0;
            TotalOrganics = 0;
            TotalOther = 0;
            
            % For each building system node
            for j = 1:length(city.systems(ind).nodes)
                % If the node is a residential node
                if strcmp(city.systems(ind).nodes(j).type.name,'Residential')==1
                    % Determine amount of waste generated in node by stream
                    
                    % Total Waste per node = Waste per person x Node
                    % population
                    numberpplcell.cell = city.systems(ind).nodes(j).cell;
                    totalnodalwaste = Evaluate(numberpplcell)*...
                    city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wastePerPerson');
                    
                    TotalWaste = TotalWaste + totalnodalwaste;
                
                    % Determine Individual Waste Fractions by Node
                    TotalPaper = TotalPaper + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wastePaperPercent');
                    
                    TotalGlass = TotalGlass + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteGlassPercent');
                    
                    TotalFeMetal = TotalFeMetal + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteMetalPercent')*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteFerrousPercent');
            
                    TotalNonFeMetal = TotalNonFeMetal + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteMetalPercent')*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteNonFerrousPercent');
                    
                    TotalFilmPlastic = TotalFilmPlastic + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wastePlasticsPercent')*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteFilmPlasticPercent');
            
                    TotalRigidPlastic = TotalRigidPlastic + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wastePlasticsPercent')*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteRigidPlasticPercent');
                    
                    TotalTextiles = TotalTextiles + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteTextilesPercent');
                    
                    TotalOrganics = TotalOrganics + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteOrganicsPercent');
                    
                    TotalOther = TotalOther + totalnodalwaste*...
                        city.systems(ind).nodes(j).GetNodeTypeAttributeValue('wasteOtherPercent');
            
                end
            end
            
            
            
                     
            %% Old Code
%             % Define only Residential Building System Nodes (Note that this
%             % is hard coded here under the index values of 1 and 1)
%             resnode = CityNet.instance().city.systems(1).nodeTypes(1);
%             wasteperperson = resnode.attributes(4).value;
%             
%             % Generate vector of waste proportions
%             % Note that structure of vector is
%             c = 4;
%             d = 11;
%             wasteproportion = zeros(1,9);
%             for i = 1:9
%                 c = c+1;
%                 wasteproportion(i) = resnode.attributes(c).value;
%                 % Metals Condition
%                 if i > 2 && i <= 4
%                     c = 7;
%                     d = d+1;
%                     wasteproportion(i) = resnode.attributes(c).value*resnode.attributes(d).value;
%                 end
%                 % Plastics Condition
%                 if i > 4 && i <= 6
%                     c = 8;
%                     d = d+1;
%                     wasteproportion(i) = resnode.attributes(c).value*resnode.attributes(d).value;
%                 end
%             end
%             
%             % Determine total residential waste generation in city by
%             % stream
%             val = wasteperperson*wasteproportion*Evaluate(NumberResidentsCity)/1000;
%             
%             % Test Line for Comparison with IWM-2 (Scenario has a
%             % population of 500000 people)            
% %             val = wasteperperson*wasteproportion*500000/1000;
            
            %% Assign Outputs
            % Assign values to each handle in class
            % Divide by 1000 to put materials in units of tonnes
            val = TotalWaste/1000;
            obj.paper = TotalPaper/1000;
            obj.glass = TotalGlass/1000;
            obj.fe_metal = TotalFeMetal/1000;
            obj.nonfe_metal = TotalNonFeMetal/1000;
            obj.filmplastic = TotalFilmPlastic/1000;
            obj.rigidplastic = TotalRigidPlastic/1000;
            obj.textiles = TotalTextiles/1000;
            obj.organics = TotalOrganics/1000;
            obj.other = TotalOther/1000;
            
        end
    end
end