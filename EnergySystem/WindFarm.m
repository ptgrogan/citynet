%% Wind Farm Class Definition
% 06-September, 2011
% Adedamola Adepetu, aadepetu@masdar.ac.ae
%%
classdef WindFarm < Behavior
    properties
        wind_speed_hours;
        %turbine specs
        cut_in_speed;
        cut_out_speed;
        rated_speed;
        coefficient_of_performance;
        turbine_blade_length;
        turbine_capacity;
        number_of_turbines;
        energy_per_turbine;
        annual_energy_generated;
        plant_capacity;
        annual_emissions_CO2;
        resource_use;
        finance;
        lifetime;

       
    end
    methods
        function obj = WindFarm()
            obj = obj@Behavior('Wind Farm', ...
                'Estimates the energy generated by a windfarm and its capacity', ...
                'MWh','[0,inf)');
        end
        
%         function PlotCellBiomassEnergy(obj)
%             figure
%             title(['Biomass Energy (' obj.units ')'])
%             obj.PlotCellValueMap(obj.annual_energy_generated)
%         end
    end
    methods(Access=protected)
        %% EvaluateImpl Function
        
        function val = EvaluateImpl(obj)      
            
            % Set city identifier
            city = CityNet.instance().city;
            
            % Search for energy system identifier       
            for i = 1:length(city.systems)
                if strcmp(city.systems(i).name,'Energy')==1
                    sys_index = i;
                    break
                end
            end      
            
            % Search for Wind Farm identifier in Energy Layer
            for i = 1:length(city.systems(sys_index).nodes)
                if strcmp(city.systems(sys_index).nodes(i).type.name,'Wind Farm')
                    % Store node ID
                    node_index = i;
                    break
                end
            end          
            
            % Set wind farm Identifier
            windfarm = city.systems(sys_index).nodes(node_index);
            obj.wind_speed_hours = zeros(1,25);
            
            for i=1:25
               obj.wind_speed_hours(i) = windfarm.GetNodeTypeAttributeValue(['Hours of wind speed at ', num2str(i-0.5)]); 
            end
            
            obj.cut_in_speed = windfarm.GetNodeTypeAttributeValue('Cut-in speed');
            obj.cut_out_speed = windfarm.GetNodeTypeAttributeValue('Cut-out speed');
            obj.rated_speed = windfarm.GetNodeTypeAttributeValue('Rated speed');
            obj.coefficient_of_performance = windfarm.GetNodeTypeAttributeValue('Coefficient of performance');
            obj.turbine_blade_length = windfarm.GetNodeTypeAttributeValue('Turbine blade length');
            obj.lifetime = windfarm.GetNodeTypeAttributeValue('Plant Lifetime');
            obj.number_of_turbines = windfarm.GetNodeTypeAttributeValue('Number of turbines');
            
            obj.energy_per_turbine = zeros(1,25);
            
            for i=1:25
               if i-0.5 < obj.cut_in_speed
                    obj.energy_per_turbine(i) = 0;
               elseif (i-0.5 >= obj.cut_in_speed) && (i-0.5 <= obj.rated_speed)
                    obj.energy_per_turbine(i) = pi*1.22521*obj.coefficient_of_performance*(obj.turbine_blade_length)^2*(i-0.5)^3*obj.wind_speed_hours(i)/(2*10^6);
               elseif (i-0.5 > obj.rated_speed) && (i-0.5 <= obj.cut_out_speed)
                    obj.energy_per_turbine(i) = pi*1.22521*obj.coefficient_of_performance*(obj.turbine_blade_length)^2*obj.rated_speed^3*obj.wind_speed_hours(i)/(2*10^6);
               else
                    obj.energy_per_turbine(i) = 0;
               end
               
            end
            obj.turbine_capacity = pi*1.22521*obj.coefficient_of_performance*(obj.turbine_blade_length)^2*obj.rated_speed^3/(2*10^6);
            obj.annual_energy_generated = sum(obj.energy_per_turbine)*obj.number_of_turbines;
            obj.plant_capacity = obj.number_of_turbines*obj.turbine_capacity;
            
            obj.annual_emissions_CO2 = obj.annual_energy_generated*windfarm.GetNodeTypeAttributeValue('Specific CO2 Emissions')/1000; %Tonnes/year
            obj.finance.capex = windfarm.GetNodeTypeAttributeValue('Specific CAPEX') * obj.plant_capacity *1000; %$
            obj.finance.om = windfarm.GetNodeTypeAttributeValue('Specific O&M') * obj.plant_capacity *1000; %$
            obj.resource_use.land = obj.number_of_turbines*4*6.5*(2*obj.turbine_blade_length)^2; %m2, assuming 4 diameters width and 6.5 diameters length per turbine
            obj.resource_use.land_per_mw = obj.resource_use.land/obj.plant_capacity; %m2 per MW
            obj.resource_use.water = 0;
            obj.resource_use.waste = 0;
            obj.resource_use.transport = 0;
               
            
            val = obj.annual_energy_generated;
            
        end
    end
end

